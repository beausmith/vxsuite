#!/usr/bin/env bash

set -euo pipefail

usage() {
  echo "script/prod-build [--skip-build] [--skip-pack]"
  echo
  echo "Build, pack, and stage all applications for production."
  echo
  echo "      --skip-build   Do not build packages, only pack and stage them."
  echo "      --skip-pack    Do not build or pack packages, only stage them."
  echo "  -v  --debug        Print debug messages."
}

get-package-archive() {
  node -pe '`${require("./package").name.replace(/^@/, "").replace(/[^a-z0-9]+/gi, "-")}-${require("./package").version}.tgz`'
}

remove-dependencies() {
  if [ $# = 0 ]; then
    return 1
  fi

  node <<JS | xargs --no-run-if-empty pnpm remove ${PNPM_VERBOSITY}
    const pkg = require('./package')
    if (pkg.$1) {
      process.stdout.write(Object.keys(pkg.$1).join('\n'))
    }
JS
  pnpm install --offline ${PNPM_VERBOSITY}
}

###
# Option Parsing
###

skip_build=false
skip_pack=false
debug=false
PNPM_VERBOSITY=--silent
RSYNC_VERBOSITY=--quiet

while [ $# -gt 0 ]; do
  arg=$1
  case "${arg}" in
    --skip-build)
      skip_build=true
    ;;

    --skip-pack)
      skip_build=true
      skip_pack=true
    ;;

    -v|--debug)
      debug=true
      PNPM_VERBOSITY=''
      RSYNC_VERBOSITY=--verbose
    ;;

    -h|--help|help)
      usage
      exit 0
    ;;

    *)
      echo "error: unknown option ${arg}" >&2
      usage >&2
      exit 1
    ;;
  esac
  shift
done


###
# Build â€“ e.g. compile TypeScript
###

if [ "${skip_build}" != true ]; then
  for app in apps/*; do
    echo "ðŸ›  build ${app}"
    PIPENV_VENV_IN_PROJECT=1 make -C ${app} build
    echo
  done
fi


###
# Pack â€“ e.g. `npm pack` compiled code into archive
###

if [ "${skip_pack}" != true ]; then
  for pkg in apps/* libs/* libs/@types/*; do
    if [ -f "${pkg}/package.json" ]; then
      echo "ðŸ“¦ pack ${pkg}"

      (
        cd "${pkg}"
        if [ "${debug}" = true ]; then
          npm pack
        else
          npm pack >/dev/null 2>&1
        fi
      )

      archive=$(cd "${pkg}" && get-package-archive)
      echo "â†’ ${pkg}/${archive}"
      echo
    fi
  done
fi


###
# Stage â€“ unpack built code & prune dependencies
###

echo "ðŸš§ staging into build"
rm -rf build
mkdir -p build
cp -rp package.json pnpm-lock.yaml pnpm-workspace.yaml pnpmfile.js build

for pkg in apps/* libs/* libs/@types/*; do
  echo "ðŸš§ stage ${pkg}"
  build_app="build/${pkg}"
  mkdir -p "${build_app}"

  if [ -f "${pkg}/package.json" ]; then
    archive=$(cd "${pkg}" && get-package-archive)
    echo "â†’ unpacking ${pkg}/${archive}"
    tar xzf "${pkg}/${archive}" --strip-components 1 -C "${build_app}"
    echo
  elif [ -f "${pkg}/Pipfile" ]; then
    echo "â†’ rsyncing ${pkg}/${archive}"
    rsync --recursive --links $RSYNC_VERBOSITY "${pkg}/" "${build_app}"
  fi
done

echo "ðŸš§ install dependencies"
(cd build && pnpm install --frozen-lockfile ${PNPM_VERBOSITY})
echo "ðŸš§ removing root dependencies & devDependencies"
(cd build && remove-dependencies dependencies && remove-dependencies devDependencies)

for pkg in apps/* libs/* libs/@types/*; do
  echo "ðŸš§ stage ${pkg}"
  if [ -f "${pkg}/package.json" ]; then
    build_app="build/${pkg}"
    echo "â†’ removing devDependencies from ${build_app}/package.json"
    (cd "${build_app}" && remove-dependencies devDependencies)
  fi

  if [ -d "${pkg}/prodserver" ]; then
    build_app="build/${pkg}"
    echo "â†’ removing dependencies from ${build_app}/package.json"
    (cd "${build_app}" && remove-dependencies dependencies)
  fi

  echo
done
