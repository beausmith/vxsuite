import moment from 'moment'
import { Election } from '@votingworks/ballot-encoder'

const SECTION_SEPARATOR = '__'
const SUBSECTION_SEPARATOR = '_'
const WORD_SEPARATOR = '-'
const TIME_FORMAT_STRING = `YYYY${WORD_SEPARATOR}MM${WORD_SEPARATOR}DD${SUBSECTION_SEPARATOR}HH${WORD_SEPARATOR}mm${WORD_SEPARATOR}ss`

export const BALLOT_PACKAGE_FOLDER = 'ballot-packages'
export const SCANNER_RESULTS_FOLDER = 'cast-vote-records'

export type ElectionData = {
  electionCounty: string
  electionName: string
  electionHash: string
  timestamp: Date
}

function sanitizeString(input: string, replacementString = ''): string {
  return input
    .replace(/[^a-z0-9]+/gi, replacementString)
    .replace(/(^-|-$)+/g, '')
    .toLocaleLowerCase()
}

/**
 * Convert an autogenerated name of the ballot configuration package zip archive
 * to the pieces of data contained in the name.
 */
export function parseBallotExportPackageInfoFromFilename(
  filename: string
): ElectionData | undefined {
  // There should be two underscores seperating the timestamp from the election information
  const segments = filename.split(SECTION_SEPARATOR)
  if (segments.length !== 2) {
    return
  }

  const [electionString, timeString] = segments

  let electionSegments = electionString.split(SUBSECTION_SEPARATOR)
  if (electionSegments.length !== 3) {
    return
  }
  electionSegments = electionSegments.map((s) => s.replace(/-/g, ' '))
  const [electionCounty, electionName, electionHash] = electionSegments

  const parsedTime = moment(timeString, TIME_FORMAT_STRING)
  return {
    electionCounty,
    electionName,
    electionHash,
    timestamp: parsedTime.toDate(),
  }
}

export function generateElectionBasedSubfolderName(
  election: Election,
  electionHash: string
): string {
  const electionCountyName = sanitizeString(
    election.county.name,
    WORD_SEPARATOR
  )
  const electionTitle = sanitizeString(election.title, WORD_SEPARATOR)
  return `${`${electionCountyName}${SUBSECTION_SEPARATOR}${electionTitle}`.toLocaleLowerCase()}${SUBSECTION_SEPARATOR}${electionHash.slice(
    0,
    10
  )}`
}

/**
 * Generate the filename for the scanning results CVR file
 */
export function generateFilenameForScanningResults(
  machineId: string,
  numBallotsScanned: number,
  isTestMode: boolean,
  time: Date = new Date()
): string {
  const machineString = `machine${SUBSECTION_SEPARATOR}${sanitizeString(
    machineId
  )}`
  const ballotString = `${numBallotsScanned}${SUBSECTION_SEPARATOR}ballots`
  const timeInformation = moment(time).format(TIME_FORMAT_STRING)
  const filename = `${machineString}${SECTION_SEPARATOR}${ballotString}${SECTION_SEPARATOR}${timeInformation}.jsonl`
  return isTestMode ? `TEST${SECTION_SEPARATOR}${filename}` : filename
}
