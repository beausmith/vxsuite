// DO NOT EDIT THIS FILE. IT IS GENERATED AUTOMATICALLY.

/* eslint-disable */

import { z } from 'zod';

import { Iso8601Date } from '@votingworks/types';

/**
 * Schema for xsd:datetime values.
 */
export const DateTimeSchema = Iso8601Date;

/**
 * Schema for xsd:date values.
 */
export const DateSchema = Iso8601Date;

/**
 * Used in Device::Type to describe the type or usage of the device generating the event.
 */
export enum DeviceType {
  /**
   * Electronic adjudication function for reviewing absentee/mail-in ballots anomalies (blanks/overvotes/write-ins/unreadable ballots).
   */
  Adjudication = 'adjudication',

  /**
   * Devices for enabling a vote capture device (VCD) to display a ballot, possibly directly connected to the VCD or through a smart card interface.
   */
  BallotActivation = 'ballot-activation',

  /**
   * Ballot marking devices (voter facing).
   */
  Bmd = 'bmd',

  /**
   * Marked ballot printing devices (voter facing).
   */
  BallotPrinting = 'ballot-printing',

  /**
   * On-demand blank ballot printers.
   */
  BlankBallotPrinting = 'blank-ballot-printing',

  /**
   * Electronic voter stations, standalone or daisy chained to a DRE-controller (voter facing).
   */
  Dre = 'dre',

  /**
   * Network controller for electronic voting (poll worker facing).
   */
  DreController = 'dre-controller',

  /**
   * DREs, or other devices that store cast vote records electronically (voter facing).
   */
  ElectronicCast = 'electronic-cast',

  /**
   * DREs, or devices that store cast vote records electronically and also print a paper record (voter facing).
   */
  ElectronicCastPaper = 'electronic-cast-paper',

  /**
   * Electronic poll book devices.
   */
  ElectronicPollBook = 'electronic-poll-book',

  /**
   * Election management systems, including for pre- and post-election administration and reporting functions.
   */
  Ems = 'ems',

  /**
   * Scanning devices for batches of ballots, auto-feeding, e.g., Central Count (poll worker facing).
   */
  ScanBatch = 'scan-batch',

  /**
   * Scanning devices for single-sheets, e.g., Precinct Count (voter facing), but could be used for Central Count by an election official.
   */
  ScanSingle = 'scan-single',

  /**
   * Remote transmission clients, e.g., for sending of unofficial results from a remote location to a central location (sending station).
   */
  TransmissionSending = 'transmission-sending',

  /**
   * Remote transmission hosts, e.g., for the receiving of unofficial results at a central location from a remote location (receiving station).
   */
  TransmissionReceiving = 'transmission-receiving',

  /**
   * Used when no other value in this enumeration applies.
   */
  Other = 'other',
}

/**
 * Schema for {@link DeviceType}.
 */
export const DeviceTypeSchema = z.nativeEnum(DeviceType);

/**
 * Used in Event::Disposition for types of event dispositions.
 */
export enum EventDispositionType {
  /**
   * For a failure disposition.
   */
  Failure = 'failure',

  /**
   * Used when the disposition is not applicable or there is no disposition.
   */
  Na = 'na',

  /**
   * For a successful disposition.
   */
  Success = 'success',

  /**
   * Used when no other value in this enumeration applies.
   */
  Other = 'other',
}

/**
 * Schema for {@link EventDispositionType}.
 */
export const EventDispositionTypeSchema = z.nativeEnum(EventDispositionType);

/**
 * Used in Hash::Type to indicate the type of hash being used for an image file.
 */
export enum HashType {
  /**
   * To indicate that the MD6 message digest algorithm is being used.
   */
  Md6 = 'md6',

  /**
   * To indicate that the SHA 256-bit signature is being used.
   */
  Sha256 = 'sha-256',

  /**
   * To indicate that the SHA 512-bit (32-byte) signature is being used.
   */
  Sha512 = 'sha-512',

  /**
   * Used when no other value in this enumeration applies.
   */
  Other = 'other',
}

/**
 * Schema for {@link HashType}.
 */
export const HashTypeSchema = z.nativeEnum(HashType);

/**
 * Device contains information about the device generating election event logs. Id is the only required attribute, all other attributes are optional.  If the device type is not found in the DeviceType enumeration, Type is 'other' and OtherType contains the appropriate type.
 */
export interface Device {
  /**
   * Used to associate any details with the event log.
   */
  Details?: string;

  /**
   * Used to describe a logged event.
   */
  Event: Event[];

  /**
   * The type of the hash, from the HashType enumeration.
   */
  HashType?: HashType;

  /**
   * If HashType is 'other', the type of the hash.
   */
  OtherHashType?: string;

  /**
   * A serial number or otherwise identifier associated with the device.
   */
  Id: string;

  /**
   * Manufacturer of the device.
   */
  Manufacturer?: string;

  /**
   * Model of the device.
   */
  Model?: string;

  /**
   * Enumerated usage of the device, e.g., ems, scan-single, etc.
   */
  Type?: DeviceType;

  /**
   * Used when Type is 'other'.
   */
  OtherType?: string;

  /**
   * Version identification of the device.
   */
  Version?: string;
}

/**
 * Schema for {@link Device}.
 */
export const DeviceSchema: z.ZodSchema<Device> = z.object({
  Details: z.optional(z.string()),
  Event: z.array(z.lazy(() => EventSchema)),
  HashType: z.optional(z.lazy(() => HashTypeSchema)),
  OtherHashType: z.optional(z.string()),
  Id: z.string(),
  Manufacturer: z.optional(z.string()),
  Model: z.optional(z.string()),
  Type: z.optional(z.lazy(() => DeviceTypeSchema)),
  OtherType: z.optional(z.string()),
  Version: z.optional(z.string()),
});

/**
 * ElectionEventLog is the root class.  It includes Device for identifying the device(s) generating the election events, the date and time when the election event log was created, and an identification of the election. Details is used as needed for additional description/details. HashType is used to specify a cryptographic hash associated with the events, that is, an event log entry, using values from the HashType enumeration.  If the type of hash is not found in the HashType enumeration, HashType is 'other' and OtherHashType contains the type of hash.
 */
export interface ElectionEventLog {
  /**
   * Used to associate any details with the event log.
   */
  Details?: string;

  /**
   * Used to describe the device(s) generating the election events.
   */
  Device: Device[];

  /**
   * Identifies the election associated with the log.
   */
  ElectionId?: string;

  /**
   * Identifies the date and time the log was generated.
   */
  GeneratedTime: string;
}

/**
 * Schema for {@link ElectionEventLog}.
 */
export const ElectionEventLogSchema: z.ZodSchema<ElectionEventLog> = z.object({
  Details: z.optional(z.string()),
  Device: z.array(z.lazy(() => DeviceSchema)),
  ElectionId: z.optional(z.string()),
  GeneratedTime: DateTimeSchema,
});

/**
 * ElectionEventLogDocumention is the root class.  It includes EventIdDescription and EventTypeDescription, as well as other information for identifying the specific device associated with the election event documentation.
 */
export interface ElectionEventLogDocumentation {
  /**
   * A serial number or otherwise identifier associated with the device.
   */
  DeviceId?: string;

  /**
   * Manufacturer of the device.
   */
  DeviceManufacturer: string;

  /**
   * Model of the device.
   */
  DeviceModel: string;

  /**
   * Version identification of the device.
   */
  DeviceVersion?: string;

  /**
   * For associating a description with an event ID.
   */
  EventIdDescription: EventIdDescription[];

  /**
   * For associating a description with an event type.
   */
  EventTypeDescription: EventTypeDescription[];

  /**
   * Identifies the date the documentation report was generated.
   */
  GeneratedDate: string;
}

/**
 * Schema for {@link ElectionEventLogDocumentation}.
 */
export const ElectionEventLogDocumentationSchema: z.ZodSchema<ElectionEventLogDocumentation> = z.object({
  DeviceId: z.optional(z.string()),
  DeviceManufacturer: z.string(),
  DeviceModel: z.string(),
  DeviceVersion: z.optional(z.string()),
  EventIdDescription: z.array(z.lazy(() => EventIdDescriptionSchema)).nonempty(),
  EventTypeDescription: z.array(z.lazy(() => EventTypeDescriptionSchema)).nonempty(),
  GeneratedDate: DateSchema,
});

/**
 * Event holds information about a specific event. Severity is an optional attribute for describing a severity indication for the event.  If the event disposition is not found in the EventDispositionType enumeration, Disposition is 'other' and OtherDisposition contains the other disposition.
 */
export interface Event {
  /**
   * Used for a brief description of the event.
   */
  Description?: string;

  /**
   * Used for additional information about the event, e.g., vendor reserved information.
   */
  Details?: string;

  /**
   * The disposition, e.g., success or failure, of the event.
   */
  Disposition: EventDispositionType;

  /**
   * Used when Disposition is 'other'.
   */
  OtherDisposition?: string;

  /**
   * Contains a cryptographic hash of the event, encoded as a string.
   */
  Hash?: string;

  /**
   * An identifier associated with the event.
   */
  Id: string;

  /**
   * A sequence number/string to uniquely identify the event in the log file.
   */
  Sequence: string;

  /**
   * Used for an indication of the severity of the event, as determined by the device vendor.
   */
  Severity?: string;

  /**
   * Identifies the date and time the event was generated.
   */
  TimeStamp: string;

  /**
   * Used for the type of event, as determined by the device vendor.
   */
  Type: string;

  /**
   * An identifier associated with a user, as relevant.
   */
  UserId?: string;
}

/**
 * Schema for {@link Event}.
 */
export const EventSchema: z.ZodSchema<Event> = z.object({
  Description: z.optional(z.string()),
  Details: z.optional(z.string()),
  Disposition: z.lazy(() => EventDispositionTypeSchema),
  OtherDisposition: z.optional(z.string()),
  Hash: z.optional(z.string()),
  Id: z.string(),
  Sequence: z.string(),
  Severity: z.optional(z.string()),
  TimeStamp: DateTimeSchema,
  Type: z.string(),
  UserId: z.optional(z.string()),
});

/**
 * For associating a brief description with an election event ID, used in ElectionEventLogDocumentation::EventIdDescription.
 */
export interface EventIdDescription {
  /**
   * Used for a brief description of the event.
   */
  Description: string;

  /**
   * An identifier associated with the event.
   */
  Id: string;
}

/**
 * Schema for {@link EventIdDescription}.
 */
export const EventIdDescriptionSchema: z.ZodSchema<EventIdDescription> = z.object({
  Description: z.string(),
  Id: z.string(),
});

/**
 * For associating a description with an election event log type, used in ElectionEventLogDocumentation::EventTypeDescription.
 */
export interface EventTypeDescription {
  /**
   * Used for a description of the event type.
   */
  Description: string;

  /**
   * An identifier associated with the event type.
   */
  Type: string;
}

/**
 * Schema for {@link EventTypeDescription}.
 */
export const EventTypeDescriptionSchema: z.ZodSchema<EventTypeDescription> = z.object({
  Description: z.string(),
  Type: z.string(),
});

